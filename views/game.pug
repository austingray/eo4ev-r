extends layout.pug

block content
  canvas(id='gamecanvas')
  div(id='status')
    div(id='feed')
    div(id='input')
      input(type='text')

  script(src='js/engine/eo.engine.js')
  script(src='js/engine/eo.util.js')
  script(src='js/engine/eo.settings.js')
  script(src='js/engine/eo.three.js')
  script(src='js/engine/eo.world.js')
  script(src='js/engine/eo.tiles.js')
  script(src='js/engine/eo.models.js')
  script(src='js/engine/eo.map.js')
  script(src='js/engine/eo.input.js')
  script(src='js/engine/eo.server.js')
  if user.access === 10
    script(src='js/engine/eo.admin.js')

  script(id="vertex_shader", type="x-shader/x-vertex").

    varying vec2 vUv;

    #ifdef USE_SKINNING

      uniform mat4 bindMatrix;
      uniform mat4 bindMatrixInverse;

      #ifdef BONE_TEXTURE

        uniform sampler2D boneTexture;
        uniform int boneTextureWidth;
        uniform int boneTextureHeight;

        mat4 getBoneMatrix( const in float i ) {

          float j = i * 4.0;
          float x = mod( j, float( boneTextureWidth ) );
          float y = floor( j / float( boneTextureWidth ) );

          float dx = 1.0 / float( boneTextureWidth );
          float dy = 1.0 / float( boneTextureHeight );

          y = dy * ( y + 0.5 );

          vec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );
          vec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );
          vec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );
          vec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );

          mat4 bone = mat4( v1, v2, v3, v4 );

          return bone;

        }

      #else

        uniform mat4 boneMatrices[ MAX_BONES ];

        mat4 getBoneMatrix( const in float i ) {

          mat4 bone = boneMatrices[ int(i) ];
          return bone;

        }

      #endif

    #endif

    void main() {
      vUv = uv;
      #ifdef USE_SKINNING
        mat4 boneMatX = getBoneMatrix( skinIndex.x );
        mat4 boneMatY = getBoneMatrix( skinIndex.y );
        mat4 boneMatZ = getBoneMatrix( skinIndex.z );
        mat4 boneMatW = getBoneMatrix( skinIndex.w );
        mat4 skinMatrix = mat4( 0.0 );
        skinMatrix += skinWeight.x * boneMatX;
        skinMatrix += skinWeight.y * boneMatY;
        skinMatrix += skinWeight.z * boneMatZ;
        skinMatrix += skinWeight.w * boneMatW;
        skinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;
        vec4 skinnedNormal = skinMatrix * vec4( normal, 0.0 );
        vec3 objectNormal = skinnedNormal.xyz;
        vec3 transformedNormal = normalMatrix * objectNormal;
        vec4 skinVertex = bindMatrix * vec4( position, 1.0 );
        vec4 skinned = vec4( 0.0 );
        skinned += boneMatX * skinVertex * skinWeight.x;
        skinned += boneMatY * skinVertex * skinWeight.y;
        skinned += boneMatZ * skinVertex * skinWeight.z;
        skinned += boneMatW * skinVertex * skinWeight.w;
        skinned  = bindMatrixInverse * skinned;
        vec4 mvPosition = modelViewMatrix * skinned;
      #else
        vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );
      #endif
      gl_Position = projectionMatrix * mvPosition;
    }



  script(id="fragment_shader", type="x-shader/x-fragment").

    uniform vec3 color;
    uniform sampler2D texture;

    varying vec2 vUv;

    void main() {

      vec4 tColor = texture2D( texture, vUv );

      gl_FragColor = vec4( mix( color, tColor.rgb, tColor.a ), 1.0 );

    }

  script.

    var stats = new Stats();
    stats.setMode( 1 ); // 0: fps, 1: ms, 2: mb

    // align top-left
    stats.domElement.style.position = 'absolute';
    stats.domElement.style.left = '0px';
    stats.domElement.style.top = '0px';

    document.body.appendChild( stats.domElement );

    var update = function () {

        stats.begin();

        // monitored code goes here

        stats.end();

        requestAnimationFrame( update );

    };

    requestAnimationFrame( update );
