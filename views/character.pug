extends layout.pug

block content
  div(class='content')
    h1 Create a New Character

    div(id='create-character')
      div(class='content-left')
        canvas(id='character')
      div(class='content-right')
        if flash
          div(class='error') #{flash}
        form(class='form', role='form', name='character', method='post', action='/character')
          div(class='row')
            label(for='character-name') Name
            input(type='text', name='character-name', id='character-name', autocomplete='off')
          div(class='row col3')
            div(class='col')
              label(for='character-sex') Sex
              select(name='character-sex', id='character-sex')
                each sex in sexes
                  option(value=''+sex.id+'') #{sex.name}
            div(class='col')
              label(for='character-race') Race
              select(name='character-races', id='character-race')
                each race in races
                  option(value=''+race.id+'', data-hue=''+race.hue+'', data-sat-min=''+race.sat_min+'', data-sat-max=''+race.sat_max+'', data-light-min=''+race.light_min+'', data-light-max=''+race.light_max+'', data-description=''+race.description+'') #{race.name}
            div(class='col')
              label(for='character-class') Class
              select(name='character-class', id='character-class')
                each cClass in classes
                  option(value=''+cClass.id+'', data-description=''+cClass.description+'') #{cClass.name}
            div(class='clear')
          div(class='row col2')
            div(class='col')
              label(for='character-skin') Skin Saturation
              input(type='range', name="skin-saturation", min="0", max="100")
            div(class='col')
              label(for='character-skin') Skin Lightness
              input(type='range', name="skin-lightness", min="0", max="100")
            div(class='clear')
          div(class='row')
            div(id="character-description")
          div(class='row submit')
            input(type='submit', value='Create')
      div(class='clear')

  script.
    var CHARACTER = CHARACTER || {};
    CHARACTER.data = {};
    CHARACTER.data.races = !{JSON.stringify(races)};
    CHARACTER.data.classes = !{JSON.stringify(classes)};

  script(src='js/character.js')
  
  script(id="vertex_shader", type="x-shader/x-vertex").

    varying vec2 vUv;
    #ifdef USE_SKINNING
      varying vec3 vViewPosition;
      varying vec3 vNormal;
      uniform mat4 bindMatrix;
      uniform mat4 bindMatrixInverse;
      uniform mat4 boneMatrices[ MAX_BONES ];
      mat4 getBoneMatrix( const in float i ) {
        mat4 bone = boneMatrices[ int(i) ];
        return bone;
      }
    #endif
    void main() {
      vUv = uv;
      #ifdef USE_SKINNING
        mat4 boneMatX = getBoneMatrix( skinIndex.x );
        mat4 boneMatY = getBoneMatrix( skinIndex.y );
        mat4 boneMatZ = getBoneMatrix( skinIndex.z );
        mat4 boneMatW = getBoneMatrix( skinIndex.w );
        mat4 skinMatrix = mat4( 0.0 );
        skinMatrix += skinWeight.x * boneMatX;
        skinMatrix += skinWeight.y * boneMatY;
        skinMatrix += skinWeight.z * boneMatZ;
        skinMatrix += skinWeight.w * boneMatW;
        skinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;
        vec4 skinnedNormal = skinMatrix * vec4( normal, 0.0 );
        vec3 objectNormal = skinnedNormal.xyz;
        vec3 transformedNormal = normalMatrix * objectNormal;
        vNormal = normalize( transformedNormal );
        vec4 skinVertex = bindMatrix * vec4( position, 1.0 );
        vec4 skinned = vec4( 0.0 );
        skinned += boneMatX * skinVertex * skinWeight.x;
        skinned += boneMatY * skinVertex * skinWeight.y;
        skinned += boneMatZ * skinVertex * skinWeight.z;
        skinned += boneMatW * skinVertex * skinWeight.w;
        skinned  = bindMatrixInverse * skinned;
        vec4 mvPosition = modelViewMatrix * skinned;
      #else
        vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );
      #endif
      gl_Position = projectionMatrix * mvPosition;
    }


  script(id="fragment_shader", type="x-shader/x-fragment").

    uniform vec3 color;
    uniform sampler2D texture;

    varying vec2 vUv;

    void main() {

      vec4 tColor = texture2D( texture, vUv );
    
      gl_FragColor = vec4( mix( color, tColor.rgb, tColor.a ), 1.0 );
    
    }
      
  script.

    var stats = new Stats();
    stats.setMode( 1 ); // 0: fps, 1: ms, 2: mb

    // align top-left
    stats.domElement.style.position = 'absolute';
    stats.domElement.style.left = '0px';
    stats.domElement.style.top = '0px';

    document.body.appendChild( stats.domElement );

    var update = function () {

        stats.begin();

        // monitored code goes here

        stats.end();

        requestAnimationFrame( update );

    };

    requestAnimationFrame( update );